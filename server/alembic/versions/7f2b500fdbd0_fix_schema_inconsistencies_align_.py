"""Fix schema inconsistencies - align SQLAlchemy models with PostgreSQL

Revision ID: 7f2b500fdbd0
Revises: ac72e9e3f540
Create Date: 2025-05-31 23:20:44.502100

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7f2b500fdbd0'
down_revision: Union[str, None] = 'ac72e9e3f540'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('batch_archive', 'batch_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('batch_archive', 'documents_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('batch_archive', 'llm_responses_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('batch_archive', 'archive_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index(op.f('idx_batch_archive_archived_at'), table_name='batch_archive')
    op.drop_index(op.f('idx_batch_archive_batch_number'), table_name='batch_archive')
    op.drop_index(op.f('idx_batch_archive_original_batch_id'), table_name='batch_archive')
    op.drop_index(op.f('idx_batches_batch_number'), table_name='batches')
    op.drop_index(op.f('idx_batches_created_at'), table_name='batches')
    op.drop_index(op.f('idx_batches_status'), table_name='batches')
    op.drop_index(op.f('idx_connections_connection_status'), table_name='connections')
    op.drop_index(op.f('idx_connections_is_active'), table_name='connections')
    op.drop_index(op.f('idx_connections_provider_id'), table_name='connections')
    op.drop_index(op.f('idx_docs_content_type'), table_name='docs')
    op.drop_index(op.f('idx_docs_doc_type'), table_name='docs')
    op.drop_index(op.f('idx_documents_batch_id'), table_name='documents')
    op.drop_index(op.f('idx_documents_doc_id'), table_name='documents')
    op.drop_index(op.f('idx_documents_filepath'), table_name='documents')
    op.drop_index(op.f('idx_documents_folder_id'), table_name='documents')
    op.drop_index(op.f('idx_documents_task_id'), table_name='documents')
    op.drop_index(op.f('idx_folders_active'), table_name='folders')
    op.drop_index(op.f('idx_folders_folder_path'), table_name='folders')
    op.drop_index(op.f('idx_llm_models_is_active'), table_name='llm_models')
    op.drop_index(op.f('idx_llm_models_provider_id'), table_name='llm_models')
    op.drop_constraint(op.f('llm_models_provider_id_fkey'), 'llm_models', type_='foreignkey')
    op.create_foreign_key(None, 'llm_models', 'llm_providers', ['provider_id'], ['id'])
    op.drop_index(op.f('idx_llm_providers_name'), table_name='llm_providers')
    op.drop_index(op.f('idx_llm_providers_provider_type'), table_name='llm_providers')
    op.alter_column('llm_responses', 'overall_score',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('llm_responses', 'time_taken_seconds',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('llm_responses', 'tokens_per_second',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=True)
    op.drop_index(op.f('idx_llm_responses_connection_id'), table_name='llm_responses')
    op.drop_index(op.f('idx_llm_responses_document_id'), table_name='llm_responses')
    op.drop_index(op.f('idx_llm_responses_prompt_id'), table_name='llm_responses')
    op.drop_index(op.f('idx_llm_responses_status'), table_name='llm_responses')
    op.drop_index(op.f('idx_llm_responses_task_id'), table_name='llm_responses')
    op.drop_index(op.f('idx_llm_responses_timestamp'), table_name='llm_responses')
    op.drop_constraint(op.f('fk_llm_responses_connection'), 'llm_responses', type_='foreignkey')
    op.create_foreign_key(None, 'llm_responses', 'connections', ['connection_id'], ['id'])
    op.drop_index(op.f('idx_model_aliases_alias_name'), table_name='model_aliases')
    op.drop_index(op.f('idx_model_aliases_model_id'), table_name='model_aliases')
    op.drop_constraint(op.f('model_aliases_alias_name_provider_pattern_key'), 'model_aliases', type_='unique')
    op.drop_constraint(op.f('model_aliases_model_id_fkey'), 'model_aliases', type_='foreignkey')
    op.create_foreign_key(None, 'model_aliases', 'models', ['model_id'], ['id'])
    op.drop_index(op.f('idx_models_common_name'), table_name='models')
    op.drop_index(op.f('idx_models_model_family'), table_name='models')
    op.drop_index(op.f('idx_prompts_active'), table_name='prompts')
    op.create_unique_constraint(None, 'prompts', ['prompt_text'])
    op.drop_index(op.f('idx_provider_models_is_active'), table_name='provider_models')
    op.drop_index(op.f('idx_provider_models_model_id'), table_name='provider_models')
    op.drop_index(op.f('idx_provider_models_provider_id'), table_name='provider_models')
    op.drop_constraint(op.f('provider_models_provider_id_model_id_key'), 'provider_models', type_='unique')
    op.drop_constraint(op.f('provider_models_model_id_fkey'), 'provider_models', type_='foreignkey')
    op.drop_constraint(op.f('provider_models_provider_id_fkey'), 'provider_models', type_='foreignkey')
    op.create_foreign_key(None, 'provider_models', 'models', ['model_id'], ['id'])
    op.create_foreign_key(None, 'provider_models', 'llm_providers', ['provider_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'provider_models', type_='foreignkey')
    op.drop_constraint(None, 'provider_models', type_='foreignkey')
    op.create_foreign_key(op.f('provider_models_provider_id_fkey'), 'provider_models', 'llm_providers', ['provider_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('provider_models_model_id_fkey'), 'provider_models', 'models', ['model_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint(op.f('provider_models_provider_id_model_id_key'), 'provider_models', ['provider_id', 'model_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_provider_models_provider_id'), 'provider_models', ['provider_id'], unique=False)
    op.create_index(op.f('idx_provider_models_model_id'), 'provider_models', ['model_id'], unique=False)
    op.create_index(op.f('idx_provider_models_is_active'), 'provider_models', ['is_active'], unique=False)
    op.drop_constraint(None, 'prompts', type_='unique')
    op.create_index(op.f('idx_prompts_active'), 'prompts', ['active'], unique=False)
    op.create_index(op.f('idx_models_model_family'), 'models', ['model_family'], unique=False)
    op.create_index(op.f('idx_models_common_name'), 'models', ['common_name'], unique=False)
    op.drop_constraint(None, 'model_aliases', type_='foreignkey')
    op.create_foreign_key(op.f('model_aliases_model_id_fkey'), 'model_aliases', 'models', ['model_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint(op.f('model_aliases_alias_name_provider_pattern_key'), 'model_aliases', ['alias_name', 'provider_pattern'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_model_aliases_model_id'), 'model_aliases', ['model_id'], unique=False)
    op.create_index(op.f('idx_model_aliases_alias_name'), 'model_aliases', ['alias_name'], unique=False)
    op.drop_constraint(None, 'llm_responses', type_='foreignkey')
    op.create_foreign_key(op.f('fk_llm_responses_connection'), 'llm_responses', 'connections', ['connection_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_llm_responses_timestamp'), 'llm_responses', ['timestamp'], unique=False)
    op.create_index(op.f('idx_llm_responses_task_id'), 'llm_responses', ['task_id'], unique=False)
    op.create_index(op.f('idx_llm_responses_status'), 'llm_responses', ['status'], unique=False)
    op.create_index(op.f('idx_llm_responses_prompt_id'), 'llm_responses', ['prompt_id'], unique=False)
    op.create_index(op.f('idx_llm_responses_document_id'), 'llm_responses', ['document_id'], unique=False)
    op.create_index(op.f('idx_llm_responses_connection_id'), 'llm_responses', ['connection_id'], unique=False)
    op.alter_column('llm_responses', 'tokens_per_second',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True)
    op.alter_column('llm_responses', 'time_taken_seconds',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True)
    op.alter_column('llm_responses', 'overall_score',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True)
    op.create_index(op.f('idx_llm_providers_provider_type'), 'llm_providers', ['provider_type'], unique=False)
    op.create_index(op.f('idx_llm_providers_name'), 'llm_providers', ['name'], unique=False)
    op.drop_constraint(None, 'llm_models', type_='foreignkey')
    op.create_foreign_key(op.f('llm_models_provider_id_fkey'), 'llm_models', 'llm_providers', ['provider_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_llm_models_provider_id'), 'llm_models', ['provider_id'], unique=False)
    op.create_index(op.f('idx_llm_models_is_active'), 'llm_models', ['is_active'], unique=False)
    op.create_index(op.f('idx_folders_folder_path'), 'folders', ['folder_path'], unique=False)
    op.create_index(op.f('idx_folders_active'), 'folders', ['active'], unique=False)
    op.create_index(op.f('idx_documents_task_id'), 'documents', ['task_id'], unique=False)
    op.create_index(op.f('idx_documents_folder_id'), 'documents', ['folder_id'], unique=False)
    op.create_index(op.f('idx_documents_filepath'), 'documents', ['filepath'], unique=False)
    op.create_index(op.f('idx_documents_doc_id'), 'documents', ['doc_id'], unique=False)
    op.create_index(op.f('idx_documents_batch_id'), 'documents', ['batch_id'], unique=False)
    op.create_index(op.f('idx_docs_doc_type'), 'docs', ['doc_type'], unique=False)
    op.create_index(op.f('idx_docs_content_type'), 'docs', ['content_type'], unique=False)
    op.create_index(op.f('idx_connections_provider_id'), 'connections', ['provider_id'], unique=False)
    op.create_index(op.f('idx_connections_is_active'), 'connections', ['is_active'], unique=False)
    op.create_index(op.f('idx_connections_connection_status'), 'connections', ['connection_status'], unique=False)
    op.create_index(op.f('idx_batches_status'), 'batches', ['status'], unique=False)
    op.create_index(op.f('idx_batches_created_at'), 'batches', ['created_at'], unique=False)
    op.create_index(op.f('idx_batches_batch_number'), 'batches', ['batch_number'], unique=False)
    op.create_index(op.f('idx_batch_archive_original_batch_id'), 'batch_archive', ['original_batch_id'], unique=False)
    op.create_index(op.f('idx_batch_archive_batch_number'), 'batch_archive', ['batch_number'], unique=False)
    op.create_index(op.f('idx_batch_archive_archived_at'), 'batch_archive', ['archived_at'], unique=False)
    op.alter_column('batch_archive', 'archive_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('batch_archive', 'llm_responses_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('batch_archive', 'documents_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('batch_archive', 'batch_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    # ### end Alembic commands ###
